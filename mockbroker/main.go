/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"flag"
	"log"
	"net/http"
	"os"
	"os/signal"
	"time"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    sw "github.com/myname/myrepo/go"
	//
	openapi "github.com/luistesperanca/osb-checker/autogenerated/go-server/go"
	"github.com/luistesperanca/osb-checker/config"
)

func init() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
}

func main() {
	var wait time.Duration
	flag.DurationVar(&wait, "graceful-timeout", config.HTTPIdleTimeout, "the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m")
	flag.Parse()

	srv := &http.Server{
		Addr: config.MockBrokerEndpoint,
		// Good practice to set timeouts to avoid Slowloris attacks.
		WriteTimeout: config.HTTPRWTimeout,
		ReadTimeout:  config.HTTPRWTimeout,
		IdleTimeout:  config.HTTPIdleTimeout,
		Handler:      openapi.NewRouter(), // Pass our instance of gorilla/mux in.
	}

	// Run our server in a goroutine so that it doesn't block.
	eChan := make(chan error, 1)
	go func() {
		log.Printf("listening on %s\n", config.MockBrokerEndpoint)
		if err := srv.ListenAndServe(); err != nil {
			log.Println(err)
			eChan <- err
		}
	}()

	c := make(chan os.Signal, 1)
	// We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)
	// SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.
	signal.Notify(c, os.Interrupt)

	// Block until we receive our signal or something goes wrong.
	select {
	case <-eChan:
		os.Exit(-1)
	// Block until we receive our signal.
	case <-c:
		break
	}

	// Create a deadline to wait for.
	ctx, cancel := context.WithTimeout(context.Background(), wait)
	defer cancel()
	// Doesn't block if no connections, but will otherwise wait
	// until the timeout deadline.
	srv.Shutdown(ctx)
	// Optionally, you could run srv.Shutdown in a goroutine and block on
	// <-ctx.Done() if your application should wait for other services
	// to finalize based on context cancellation.
	log.Println("shutting down")
	os.Exit(0)
}
