package utils

import (
	"encoding/json"
	"reflect"

	openapi "github.com/luistesperanca/osb-checker/autogenerated/models"
	. "github.com/luistesperanca/osb-checker/config"
)

// TODO: For provision, update and bind operation, testCatalogSchema should be
// called to assert the legality of parameters schema.
type SchemaOpts struct {
	ServiceID, PlanID  string
	Parameters         interface{}
	SchemaType, Action string
}

func ParametersSchemaCheck(catalog openapi.Catalog, opt *SchemaOpts) error {
	svc := func(catalog openapi.Catalog) openapi.Service {
		for _, svc := range catalog.Services {
			if svc.Id == opt.ServiceID {
				return svc
			}
		}
		return openapi.Service{}
	}(catalog)
	plan := func(svc openapi.Service) openapi.Plan {
		for _, plan := range svc.Plans {
			if plan.Id == opt.PlanID {
				return plan
			}
		}
		return openapi.Plan{}
	}(svc)

	// If plan.Schemas is empty, then consider it would success no matter what opt.Parameter is.
	emptySchemas := openapi.SchemasObject{}
	if reflect.DeepEqual(plan.Schemas, emptySchemas) {
		return nil
	}
	params := make(map[string]interface{})
	switch opt.SchemaType {
	case TypeServiceInstance:
		// If plan.Schemas.ServiceInstance is empty, then consider it would success no matter
		// what opt.Parameter is.
		instance := plan.Schemas.ServiceInstance
		emptyInsSchemas := openapi.ServiceInstanceSchemaObject{}
		if reflect.DeepEqual(instance, emptyInsSchemas) {
			return nil
		}
		if opt.Action == ActionCreate {
			// If instance.Create is empty, then consider it would success no matter
			// what opt.Parameter is.
			create := instance.Create
			emptyCreateSchemas := openapi.SchemaParameters{}
			if reflect.DeepEqual(create, emptyCreateSchemas) {
				return nil
			}
			params = create.Parameters
		} else {
			// If instance.Update is empty, then consider it would success no matter
			// what opt.Parameter is.
			update := instance.Update
			emptyUpdateSchemas := openapi.SchemaParameters{}
			if reflect.DeepEqual(update, emptyUpdateSchemas) {
				return nil
			}
			params = update.Parameters
		}
		break
	case TypeServiceBinding:
		// If plan.Schemas.ServiceBinding is empty, then consider it would success no matter
		// what opt.Parameter is.
		binding := plan.Schemas.ServiceBinding
		emptyBindSchemas := openapi.ServiceBindingSchemaObject{}
		if reflect.DeepEqual(binding, emptyBindSchemas) {
			return nil
		}
		// If binding.Create is empty, then consider it would success no matter what
		// opt.Parameter is.
		create := binding.Create
		emptyCreateSchemas := openapi.SchemaParameters{}
		if reflect.DeepEqual(create, emptyCreateSchemas) {
			return nil
		}
		params = create.Parameters
	}

	json.Marshal(params)
	return nil
}
