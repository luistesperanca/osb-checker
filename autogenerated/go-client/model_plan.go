/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Plan struct for Plan
type Plan struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	// See [Service Metadata Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#service-metadata) for more details.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Free *bool `json:"free,omitempty"`
	Bindable *bool `json:"bindable,omitempty"`
	PlanUpdateable *bool `json:"plan_updateable,omitempty"`
	Schemas *SchemasObject `json:"schemas,omitempty"`
	MaximumPollingDuration *int32 `json:"maximum_polling_duration,omitempty"`
	MaintenanceInfo *MaintenanceInfo `json:"maintenance_info,omitempty"`
	BindingRotatable *bool `json:"binding_rotatable,omitempty"`
}

// NewPlan instantiates a new Plan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlan(id string, name string, description string) *Plan {
	this := Plan{}
	this.Id = id
	this.Name = name
	this.Description = description
	var free bool = true
	this.Free = &free
	var bindingRotatable bool = false
	this.BindingRotatable = &bindingRotatable
	return &this
}

// NewPlanWithDefaults instantiates a new Plan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWithDefaults() *Plan {
	this := Plan{}
	var free bool = true
	this.Free = &free
	var bindingRotatable bool = false
	this.BindingRotatable = &bindingRotatable
	return &this
}

// GetId returns the Id field value
func (o *Plan) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Plan) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Plan) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Plan) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Plan) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Plan) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *Plan) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Plan) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Plan) SetDescription(v string) {
	o.Description = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Plan) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Plan) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Plan) SetMetadata(v map[string]interface{}) {
	o.Metadata = &v
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *Plan) GetFree() bool {
	if o == nil || o.Free == nil {
		var ret bool
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetFreeOk() (*bool, bool) {
	if o == nil || o.Free == nil {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *Plan) HasFree() bool {
	if o != nil && o.Free != nil {
		return true
	}

	return false
}

// SetFree gets a reference to the given bool and assigns it to the Free field.
func (o *Plan) SetFree(v bool) {
	o.Free = &v
}

// GetBindable returns the Bindable field value if set, zero value otherwise.
func (o *Plan) GetBindable() bool {
	if o == nil || o.Bindable == nil {
		var ret bool
		return ret
	}
	return *o.Bindable
}

// GetBindableOk returns a tuple with the Bindable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetBindableOk() (*bool, bool) {
	if o == nil || o.Bindable == nil {
		return nil, false
	}
	return o.Bindable, true
}

// HasBindable returns a boolean if a field has been set.
func (o *Plan) HasBindable() bool {
	if o != nil && o.Bindable != nil {
		return true
	}

	return false
}

// SetBindable gets a reference to the given bool and assigns it to the Bindable field.
func (o *Plan) SetBindable(v bool) {
	o.Bindable = &v
}

// GetPlanUpdateable returns the PlanUpdateable field value if set, zero value otherwise.
func (o *Plan) GetPlanUpdateable() bool {
	if o == nil || o.PlanUpdateable == nil {
		var ret bool
		return ret
	}
	return *o.PlanUpdateable
}

// GetPlanUpdateableOk returns a tuple with the PlanUpdateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetPlanUpdateableOk() (*bool, bool) {
	if o == nil || o.PlanUpdateable == nil {
		return nil, false
	}
	return o.PlanUpdateable, true
}

// HasPlanUpdateable returns a boolean if a field has been set.
func (o *Plan) HasPlanUpdateable() bool {
	if o != nil && o.PlanUpdateable != nil {
		return true
	}

	return false
}

// SetPlanUpdateable gets a reference to the given bool and assigns it to the PlanUpdateable field.
func (o *Plan) SetPlanUpdateable(v bool) {
	o.PlanUpdateable = &v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *Plan) GetSchemas() SchemasObject {
	if o == nil || o.Schemas == nil {
		var ret SchemasObject
		return ret
	}
	return *o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetSchemasOk() (*SchemasObject, bool) {
	if o == nil || o.Schemas == nil {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *Plan) HasSchemas() bool {
	if o != nil && o.Schemas != nil {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given SchemasObject and assigns it to the Schemas field.
func (o *Plan) SetSchemas(v SchemasObject) {
	o.Schemas = &v
}

// GetMaximumPollingDuration returns the MaximumPollingDuration field value if set, zero value otherwise.
func (o *Plan) GetMaximumPollingDuration() int32 {
	if o == nil || o.MaximumPollingDuration == nil {
		var ret int32
		return ret
	}
	return *o.MaximumPollingDuration
}

// GetMaximumPollingDurationOk returns a tuple with the MaximumPollingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetMaximumPollingDurationOk() (*int32, bool) {
	if o == nil || o.MaximumPollingDuration == nil {
		return nil, false
	}
	return o.MaximumPollingDuration, true
}

// HasMaximumPollingDuration returns a boolean if a field has been set.
func (o *Plan) HasMaximumPollingDuration() bool {
	if o != nil && o.MaximumPollingDuration != nil {
		return true
	}

	return false
}

// SetMaximumPollingDuration gets a reference to the given int32 and assigns it to the MaximumPollingDuration field.
func (o *Plan) SetMaximumPollingDuration(v int32) {
	o.MaximumPollingDuration = &v
}

// GetMaintenanceInfo returns the MaintenanceInfo field value if set, zero value otherwise.
func (o *Plan) GetMaintenanceInfo() MaintenanceInfo {
	if o == nil || o.MaintenanceInfo == nil {
		var ret MaintenanceInfo
		return ret
	}
	return *o.MaintenanceInfo
}

// GetMaintenanceInfoOk returns a tuple with the MaintenanceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetMaintenanceInfoOk() (*MaintenanceInfo, bool) {
	if o == nil || o.MaintenanceInfo == nil {
		return nil, false
	}
	return o.MaintenanceInfo, true
}

// HasMaintenanceInfo returns a boolean if a field has been set.
func (o *Plan) HasMaintenanceInfo() bool {
	if o != nil && o.MaintenanceInfo != nil {
		return true
	}

	return false
}

// SetMaintenanceInfo gets a reference to the given MaintenanceInfo and assigns it to the MaintenanceInfo field.
func (o *Plan) SetMaintenanceInfo(v MaintenanceInfo) {
	o.MaintenanceInfo = &v
}

// GetBindingRotatable returns the BindingRotatable field value if set, zero value otherwise.
func (o *Plan) GetBindingRotatable() bool {
	if o == nil || o.BindingRotatable == nil {
		var ret bool
		return ret
	}
	return *o.BindingRotatable
}

// GetBindingRotatableOk returns a tuple with the BindingRotatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetBindingRotatableOk() (*bool, bool) {
	if o == nil || o.BindingRotatable == nil {
		return nil, false
	}
	return o.BindingRotatable, true
}

// HasBindingRotatable returns a boolean if a field has been set.
func (o *Plan) HasBindingRotatable() bool {
	if o != nil && o.BindingRotatable != nil {
		return true
	}

	return false
}

// SetBindingRotatable gets a reference to the given bool and assigns it to the BindingRotatable field.
func (o *Plan) SetBindingRotatable(v bool) {
	o.BindingRotatable = &v
}

func (o Plan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Free != nil {
		toSerialize["free"] = o.Free
	}
	if o.Bindable != nil {
		toSerialize["bindable"] = o.Bindable
	}
	if o.PlanUpdateable != nil {
		toSerialize["plan_updateable"] = o.PlanUpdateable
	}
	if o.Schemas != nil {
		toSerialize["schemas"] = o.Schemas
	}
	if o.MaximumPollingDuration != nil {
		toSerialize["maximum_polling_duration"] = o.MaximumPollingDuration
	}
	if o.MaintenanceInfo != nil {
		toSerialize["maintenance_info"] = o.MaintenanceInfo
	}
	if o.BindingRotatable != nil {
		toSerialize["binding_rotatable"] = o.BindingRotatable
	}
	return json.Marshal(toSerialize)
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


