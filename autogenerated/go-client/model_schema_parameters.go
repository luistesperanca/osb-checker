/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SchemaParameters struct for SchemaParameters
type SchemaParameters struct {
	Parameters *map[string]interface{} `json:"parameters,omitempty"`
}

// NewSchemaParameters instantiates a new SchemaParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaParameters() *SchemaParameters {
	this := SchemaParameters{}
	return &this
}

// NewSchemaParametersWithDefaults instantiates a new SchemaParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaParametersWithDefaults() *SchemaParameters {
	this := SchemaParameters{}
	return &this
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *SchemaParameters) GetParameters() map[string]interface{} {
	if o == nil || o.Parameters == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaParameters) GetParametersOk() (*map[string]interface{}, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *SchemaParameters) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *SchemaParameters) SetParameters(v map[string]interface{}) {
	o.Parameters = &v
}

func (o SchemaParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaParameters struct {
	value *SchemaParameters
	isSet bool
}

func (v NullableSchemaParameters) Get() *SchemaParameters {
	return v.value
}

func (v *NullableSchemaParameters) Set(val *SchemaParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaParameters(val *SchemaParameters) *NullableSchemaParameters {
	return &NullableSchemaParameters{value: val, isSet: true}
}

func (v NullableSchemaParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


